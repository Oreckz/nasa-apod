package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

// Response Autogenerated at https://mholt.github.io/json-to-go/
type Response struct {
	Date           string `json:"date"`
	Explanation    string `json:"explanation"`
	Hdurl          string `json:"hdurl"`
	MediaType      string `json:"media_type"`
	ServiceVersion string `json:"service_version"`
	Title          string `json:"title"`
	URL            string `json:"url"`
}

func main() {

	apiKey := os.Getenv("NASA_KEY")
	url := "https://api.nasa.gov/planetary/apod?api_key=" + apiKey

	resp, err := http.Get(url)
	if err != nil {
		panic(err)
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			panic(err)
		}
	}(resp.Body)

	body, err := io.ReadAll(resp.Body)

	var result Response
	if err := json.Unmarshal(body, &result); err != nil {
		fmt.Println("Cannot unmarshall JSON")
	}

	fmt.Println("Downloading image from " + result.Hdurl)

	filename := result.Title + ".jpg"
	noSpaceFilename := strings.ReplaceAll(filename, " ", "_")

	file, err := os.Create(strings.ToLower(noSpaceFilename))
	if err != nil {
		panic(err)
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {
			panic(err)
		}
	}(file)

	r, err := http.Get(result.Hdurl)
	if err != nil {
		fmt.Println("Cannot get image")
	}
	file.ReadFrom(r.Body)
}
